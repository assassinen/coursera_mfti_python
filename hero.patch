Index: oop_patterns_python/week_3/test_decorators.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/test_decorators.py	(date 1540222933000)
+++ oop_patterns_python/week_3/test_decorators.py	(date 1540222933000)
@@ -0,0 +1,105 @@
+import unittest
+import oop_patterns_python.week_3.hero as hero
+import oop_patterns_python.week_3.hero_effects as main
+
+
+class TestBaff(unittest.TestCase):
+    def setUp(self):
+        self.hero = hero.Hero()
+
+    def test_base_hero_stats(self):
+        stats = {
+            "HP": 128,
+            "MP": 42,
+            "SP": 100,
+            "Strength": 15,
+            "Perception": 4,
+            "Endurance": 8,
+            "Charisma": 2,
+            "Intelligence": 3,
+            "Agility": 8,
+            "Luck": 1
+        }
+        self.assertDictEqual(stats, self.hero.get_stats())
+
+    def test_berserk(self):
+        h = main.Berserk(self.hero)
+        stats = {
+            "HP": 178,  # 128+50
+            "Strength": 22,  # 15+7
+            "Perception": 1,  # 4-3
+            "Endurance": 15,  # 8+7
+            "Charisma": -1,  # 2-3
+            "Intelligence": 0,  # 3-3
+            "Agility": 15,  # 8+7
+            "Luck": 8  # 1+7
+        }
+        self.assertDictEqual(stats, h.get_stats())
+        self.assertEqual(h.get_positive_effects(), ['Berserk'])
+        self.assertEqual(h.get_negative_effects(), [])
+
+    def test_blessing(self):
+        h = main.Blessing(self.hero)
+        stats = {
+            "Strength": 17,
+            "Perception": 6,
+            "Endurance": 10,
+            "Charisma": 4,
+            "Intelligence": 5,
+            "Agility": 10,
+            "Luck": 3
+        }
+        self.assertDictEqual(stats, h.get_stats())
+        self.assertEqual(h.get_positive_effects(), ['Blessing'])
+        self.assertEqual(h.get_negative_effects(), [])
+
+    def test_weakness(self):
+        h = main.Weakness(self.hero)
+        stats = {
+            "Strength": 11,
+            "Perception": 4,
+            "Endurance": 4,
+            "Charisma": 2,
+            "Intelligence": 3,
+            "Agility": 4,
+            "Luck": 1
+        }
+        self.assertDictEqual(stats, h.get_stats())
+        self.assertEqual(h.get_positive_effects(), [])
+        self.assertEqual(h.get_negative_effects(), ['Weakness'])
+
+    def test_evileye(self):
+        h = main.EvilEye(self.hero)
+        stats = {
+            "Strength": 15,
+            "Perception": 4,
+            "Endurance": 8,
+            "Charisma": 2,
+            "Intelligence": 3,
+            "Agility": 8,
+            "Luck": -9  # 1-10
+        }
+        self.assertDictEqual(stats, h.get_stats())
+        self.assertEqual(h.get_positive_effects(), [])
+        self.assertEqual(h.get_negative_effects(), ['EvilEye'])
+
+    def test_curse(self):
+        h = main.Curse(self.hero)
+        stats = {
+            "Strength": 13,
+            "Perception": 2,
+            "Endurance": 6,
+            "Charisma": 0,
+            "Intelligence": 1,
+            "Agility": 6,
+            "Luck": -1
+        }
+        self.assertDictEqual(stats, h.get_stats())
+        self.assertEqual(h.get_positive_effects(), [])
+        self.assertEqual(h.get_negative_effects(), ['Curse'])
+
+    def test_two_buffs(self):
+        h = main.Curse(main.Berserk(main.EvilEye(self.hero)))
+
+        self.assertEqual(h.get_positive_effects(), ['Berserk'])
+        self.assertEqual(h.get_negative_effects(), ['EvilEye', 'Curse'])
\ No newline at end of file
Index: oop_patterns_python/week_3/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/main.py	(date 1540221856000)
+++ oop_patterns_python/week_3/main.py	(date 1540221856000)
@@ -0,0 +1,1 @@
+from oop_patterns_python.week_3.hero import Hero
\ No newline at end of file
Index: oop_patterns_python/week_3/hero_eff.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/hero_eff.py	(date 1540225164000)
+++ oop_patterns_python/week_3/hero_eff.py	(date 1540225164000)
@@ -0,0 +1,76 @@
+class AbstractEffect(Hero, ABC):
+    def __init__(self, base):
+        self.base = base
+
+    @abstractmethod
+    def get_stats(self):
+        return self.base.get_stats()
+
+    def get_positive_effects(self):
+        return self.base.get_positive_effects()
+
+    def get_negative_effects(self):
+        return self.base.get_negative_effects()
+
+class AbstractPositive(AbstractEffect):
+    def get_positive_effects(self):
+        effects = self.base.get_positive_effects()
+        effects.append(type(self).__name__)
+        return effects
+
+class AbstractNegative(AbstractEffect):
+    def get_negaitve_effects(self):
+        effects = self.base.get_negative_effects()
+        effects.append(type(self).__name__)
+        return effects
+
+class Berserk(AbstractPositive):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats["HP"] += 50
+        stats["Strength"] += 7
+        stats["Endurance"] += 7
+        stats["Agility"] += 7
+        stats["Luck"] += 7
+        stats["Perception"] -= 3
+        stats["Charisma"] -= 3
+        stats["Intelligence"] -= 3
+        return stats
+
+class Blessing(AbstractPositive):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats["Strength"] += 2
+        stats["Endurance"] += 2
+        stats["Agility"] += 2
+        stats["Luck"] += 2
+        stats["Perception"] += 2
+        stats["Charisma"] += 2
+        stats["Intelligence"] += 2
+        return stats
+
+class Weakness(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats["Strength"] -= 4
+        stats["Endurance"] -= 4
+        stats["Agility"] -= 4
+        return stats
+
+class EvilEye(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats["Luck"] -= 10
+        return stats
+
+class Curse(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats["Strength"] -= 2
+        stats["Endurance"] -= 2
+        stats["Agility"] -= 2
+        stats["Luck"] -= 2
+        stats["Perception"] -= 2
+        stats["Charisma"] -= 2
+        stats["Intelligence"] -= 2
+        return stats
\ No newline at end of file
Index: oop_patterns_python/week_3/hero_effects.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/hero_effects.py	(revision 1892a7211921228fe6e4b68f84181ff36076c2dc)
+++ oop_patterns_python/week_3/hero_effects.py	(date 1540224995000)
@@ -5,12 +5,118 @@
     def __init__(self, base):
         self.base = base
 
+    @abstractmethod
     def get_stats(self):  # Возвращает итоговые хараетеристики
         # после применения эффекта
         self.base.get_stats
 
     def get_positive_effects(self):
-        self.base.get_positive_effects
+        return self.base.get_positive_effects()
+
+    def get_negative_effects(self):
+        return self.base.get_negative_effects()
+
+class AbstractPositice(AbstractEffect):
+    def get_positive_effects(self):
+        effects = self.base.get_positive_effects()
+        effects.append(type(self).__name__)
+        return effects
 
+class AbstractNegative(AbstractEffect):
     def get_negative_effects(self):
-        self.base.get_negative_effects
\ No newline at end of file
+        effects = self.base.get_negative_effects()
+        effects.append(type(self).__name__)
+        return effects
+
+class Berserk(AbstractPositice):
+
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats['HP'] += 50
+        stats['Strength'] += 7
+        stats['Endurance'] += 7
+        stats['Agility'] += 7
+        stats['Luck'] += 7
+        stats['Perception'] -= 3
+        stats['Charisma'] -= 3
+        stats['Intelligence'] -= 3
+        del stats['MP']
+        del stats['SP']
+
+        return stats
+
+    # def get_positive_effects(self):
+    #     positive_effects = self.base.get_positive_effects()
+    #     positive_effects.append('Berserk')
+    #     return positive_effects
+
+class Blessing(AbstractPositice):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats['Strength'] += 2
+        stats['Endurance'] += 2
+        stats['Agility'] += 2
+        stats['Luck'] += 2
+        stats['Perception'] += 2
+        stats['Charisma'] += 2
+        stats['Intelligence'] += 2
+        del stats['HP']
+        del stats['MP']
+        del stats['SP']
+
+        return stats
+
+    # def get_positive_effects(self):
+    #     positive_effects = self.base.get_positive_effects()
+    #     positive_effects.append('Blessing')
+    #     return positive_effects
+
+class Weakness(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats['Strength'] -= 4
+        stats['Endurance'] -= 4
+        stats['Agility'] -= 4
+        del stats['HP']
+        del stats['MP']
+        del stats['SP']
+        return stats
+
+    # def get_negative_effects(self):
+    #     effects = self.base.get_negative_effects()
+    #     effects.append('Weakness')
+    #     return effects
+
+class EvilEye(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats['Luck'] -= 10
+        del stats['HP']
+        del stats['MP']
+        del stats['SP']
+        return stats
+
+    # def get_negative_effects(self):
+    #     effects = self.base.get_negative_effects()
+    #     effects.append('EvilEye')
+    #     return effects
+
+class Curse(AbstractNegative):
+    def get_stats(self):
+        stats = self.base.get_stats()
+        stats['Strength'] -= 2
+        stats['Endurance'] -= 2
+        stats['Agility'] -= 2
+        stats['Luck'] -= 2
+        stats['Perception'] -= 2
+        stats['Charisma'] -= 2
+        stats['Intelligence'] -= 2
+        del stats['HP']
+        del stats['MP']
+        del stats['SP']
+        return stats
+
+    # def get_negative_effects(self):
+    #     effects = self.base.get_negative_effects()
+    #     effects.append('Curse')
+    #     return effects
\ No newline at end of file
Index: oop_patterns_python/week_3/hero.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/hero.py	(revision 1892a7211921228fe6e4b68f84181ff36076c2dc)
+++ oop_patterns_python/week_3/hero.py	(date 1540221324000)
@@ -17,6 +17,14 @@
             "Luck": 1
         }
 
+    # "Сила": 15,
+    # "Восприятие": 4,
+    # "Выносливость": 8,
+    # "Харизма": 2,
+    # "Интеллект": 3,
+    # "ловкость": 8,
+    # "Удача": 1
+
     def get_positive_effects(self):
         return self.positive_effects.copy()
 
Index: oop_patterns_python/week_3/test_hero.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- oop_patterns_python/week_3/test_hero.py	(date 1540224335000)
+++ oop_patterns_python/week_3/test_hero.py	(date 1540224335000)
@@ -0,0 +1,41 @@
+from oop_patterns_python.week_3.hero_effects import *
+from oop_patterns_python.week_3.hero import Hero
+
+
+test_hero = Hero()
+# print(test_hero.get_stats())
+print()
+print(1, test_hero.get_positive_effects())
+print(6, test_hero.get_negative_effects())
+print(test_hero.get_stats())
+
+test_hero = Berserk(test_hero)
+print()
+print(2, test_hero.get_positive_effects())
+print(6, test_hero.get_negative_effects())
+print(test_hero.get_stats())
+
+test_hero = Berserk(test_hero)
+print()
+print(3, test_hero.get_positive_effects())
+print(6, test_hero.get_negative_effects())
+print(test_hero.get_stats())
+# test_hero = Blessing(test_hero)
+
+test_hero = Blessing(test_hero)
+print()
+print(4, test_hero.get_positive_effects())
+print(6, test_hero.get_negative_effects())
+print(test_hero.get_stats())
+
+# test_hero = test_hero.base.base
+# print()
+# print(5, test_hero.get_positive_effects())
+# print(test_hero.get_stats())
+
+
+test_hero = Weakness(test_hero)
+print()
+print(6, test_hero.get_positive_effects())
+print(6, test_hero.get_negative_effects())
+print(test_hero.get_stats())
